b44f405afc0709360f7f67153574a37c
'use strict';

var _chance = require('chance');

var _chance2 = _interopRequireDefault(_chance);

var _Login = require('../../src/actions/Login');

var LoginActions = _interopRequireWildcard(_Login);

var _Actions = require('../../src/reducers/Actions');

var _Actions2 = _interopRequireDefault(_Actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Login Actions', function () {
  var chance = void 0;

  var createFakeEvent = function createFakeEvent() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : chance.string();
    return {
      target: {
        value: value
      }
    };
  };

  beforeEach(function () {
    chance = (0, _chance2.default)();
  });

  describe('Set Email', function () {
    it('is a function', function () {
      expect(LoginActions.setEmail).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setEmail(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setEmail(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setEmail(createFakeEvent(fakeEventValue));

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setEmail,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Set Password', function () {
    it('is a function', function () {
      expect(LoginActions.setPassword).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setPassword(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setPassword(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setPassword(createFakeEvent(fakeEventValue));

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setPassword,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Set First Name', function () {
    it('is a function', function () {
      expect(LoginActions.setFirstName).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setFirstName(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setFirstName(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setFirstName(createFakeEvent(fakeEventValue));

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setFirstName,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Set Last Name', function () {
    it('is a function', function () {
      expect(LoginActions.setLastName).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setLastName(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setLastName(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setLastName(createFakeEvent(fakeEventValue));

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setLastName,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Set Password Repeat', function () {
    it('is a function', function () {
      expect(LoginActions.setPasswordRepeat).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setPasswordRepeat(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setPasswordRepeat(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setPasswordRepeat(createFakeEvent(fakeEventValue));

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setPasswordRepeat,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Set Address', function () {
    it('is a function', function () {
      expect(LoginActions.setAddress).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setAddress(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setAddress(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setAddress(createFakeEvent(fakeEventValue));

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setAddress,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Set City', function () {
    it('is a function', function () {
      expect(LoginActions.setCity).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setCity(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setCity(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setCity(createFakeEvent(fakeEventValue));

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setCity,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Set Address State', function () {
    it('is a function', function () {
      expect(LoginActions.setAddressState).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setAddressState(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setAddressState(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setAddressState({ value: fakeEventValue });

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setAddressState,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Set Zipcode', function () {
    it('is a function', function () {
      expect(LoginActions.setZipcode).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.setZipcode(createFakeEvent());

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.setZipcode(createFakeEvent());

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches the correct action', function () {
      var mockDispatch = jest.fn();
      var fakeEventValue = chance.string();
      var dispatchFunction = LoginActions.setZipcode(createFakeEvent(fakeEventValue));

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.setZipcode,
        value: fakeEventValue
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Open Login Modal', function () {
    it('is a function', function () {
      expect(LoginActions.closeModal).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.openLoginModal();

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.openLoginModal();

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.openLoginModal();

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.toggleLoginModal
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Open Signup Modal', function () {
    it('is a function', function () {
      expect(LoginActions.openSignupModal).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.openSignupModal();

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.openSignupModal();

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.openSignupModal();

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.toggleSignupModal
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });

  describe('Close Modal', function () {
    it('is a function', function () {
      expect(LoginActions.closeModal).toEqual(expect.any(Function));
    });

    it('returns a dispatch function', function () {
      var dispatchFunction = LoginActions.closeModal();

      expect(dispatchFunction).toEqual(expect.any(Function));
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.closeModal();

      dispatchFunction(mockDispatch);

      expect(mockDispatch).toHaveBeenCalled();
    });

    it('dispatches an action', function () {
      var mockDispatch = jest.fn();
      var dispatchFunction = LoginActions.closeModal();

      dispatchFunction(mockDispatch);

      var expectedAction = {
        type: _Actions2.default.login.clear
      };

      expect(mockDispatch).toHaveBeenCalledWith(expectedAction);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,