{"version":3,"sources":["requestSelection.spec.js"],"names":["describe","wrapper","setTypeOfRequest","jest","fn","renderComponent","beforeEach","it","expect","type","toEqual","Grid","props","container","toBeTruthy","assertions","GridRows","children","forEach","row","Row","BreadcrumbRow","childAt","BreadcrumbSegment","Segment","Breadcrumb","BreadcrumbComponent","activeStep","HeaderRow","HeaderSegment","header","Header","as","subHeader","SubHeader","LawnMowingRow","LawnMowingSegment","LawnMowingComponent","RequestOptionComponent","title","imageURL","onClick","mock","calls","length","toBe","RakingRow","RakingSegment","RakingComponent","snowClearingRow","snowClearingSegment","snowClearingComponent","CustomRow","CustomSegment","CustomComponent"],"mappings":"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","file":"requestSelection.spec.js","sourcesContent":["import React from \"react\";\nimport { shallowWithStore } from 'enzyme-redux';\nimport { createMockStore } from 'redux-test-utils';\nimport configureStore from 'redux-mock-store';\nimport Actions from '../../../src/reducers/Actions';\nimport {\n    Menu,\n    Modal,\n    Grid,\n    Input,\n    Button,\n    Form,\n    Segment,\n    Header\n} from \"semantic-ui-react\";\nimport { shallow } from \"enzyme\";\nimport RequestSelectionComponent from \"../../../src/components/pages/pipeline/requestSelection\";\nimport BreadcrumbComponent from \"../../../src/components/helpers/breadcrumb\";\nimport RequestOptionComponent from \"../../../src/components/helpers/RequestOption\";\n\ndescribe(\"RequestSelection\", () => {\n\n            let wrapper;\n            const setTypeOfRequest = jest.fn();\n            const renderComponent = () => shallow( < RequestSelectionComponent setTypeOfRequest = { setTypeOfRequest } />);\n\n                beforeEach(() => {\n                    wrapper = renderComponent();\n                });\n\n                it(\"is wrapped in a Grid Container\", () => {\n                    expect(wrapper.type()).toEqual(Grid);\n                });\n\n                it(\"is styled as a container Grid\", () => {\n                    expect(wrapper.props().container).toBeTruthy();\n                });\n\n                it(\"contains five rows\", () => {\n                    expect.assertions(6);\n\n                    const GridRows = wrapper.children();\n\n                    GridRows.forEach(row => {\n                        expect(row.type()).toEqual(Grid.Row);\n                    });\n                });\n\n                describe(\"BreadcrumbRow\", () => {\n                    let BreadcrumbRow;\n\n                    beforeEach(() => {\n                        BreadcrumbRow = wrapper.childAt(0);\n                    });\n\n                    it(\"is a Breadcrumb Row\", () => {\n                        expect(BreadcrumbRow.type()).toEqual(Grid.Row);\n                    });\n\n                    describe(\"BreadcrumbSegment\", () => {\n                        let BreadcrumbSegment;\n\n                        beforeEach(() => {\n                            BreadcrumbSegment = BreadcrumbRow.childAt(0);\n                        });\n\n                        it(\"is a Breadcrumb Segment\", () => {\n                            expect(BreadcrumbSegment.type()).toEqual(Segment);\n                        });\n\n                        describe(\"BreadcrumbComponent\", () => {\n                            let Breadcrumb;\n\n                            beforeEach(() => {\n                                Breadcrumb = BreadcrumbSegment.childAt(0);\n                            });\n\n                            it(\"is a breadcrumb\", () => {\n                                expect(Breadcrumb.type()).toEqual(BreadcrumbComponent);\n                            });\n\n                            it(\"has an active step\", () => {\n                                expect(Breadcrumb.props().activeStep).toEqual(0);\n                            });\n                        });\n                    });\n                });\n\n                describe(\"HeaderRow\", () => {\n                    let HeaderRow;\n\n                    beforeEach(() => {\n                        HeaderRow = wrapper.childAt(1);\n                    });\n\n                    it(\"is a Header Row\", () => {\n                        expect(HeaderRow.type()).toEqual(Grid.Row);\n                    });\n\n                    describe(\"HeaderSegment\", () => {\n                        let HeaderSegment;\n\n                        beforeEach(() => {\n                            HeaderSegment = HeaderRow.childAt(0);\n                        });\n\n                        it(\"is a Header Segment\", () => {\n                            expect(HeaderSegment.type()).toEqual(Segment);\n                        });\n\n                        describe(\"Header\", () => {\n                            let header;\n\n                            beforeEach(() => {\n                                header = HeaderSegment.childAt(0);\n                            });\n\n                            it(\"is a Header\", () => {\n                                expect(header.type()).toEqual(Header);\n                            });\n\n                            it(\"is a Header\", () => {\n                                expect(header.props().as).toEqual(\"h2\");\n                            });\n\n                            describe(\"SubHeader\", () => {\n                                let subHeader;\n\n                                beforeEach(() => {\n                                    subHeader = header.childAt(0);\n                                });\n\n                                it(\"is a SubHeader\", () => {\n                                    expect(subHeader.type()).toEqual(Header.SubHeader);\n                                });\n                            });\n                        });\n                    });\n                }); describe(\"LawnMowingRow\", () => {\n                    let LawnMowingRow;\n\n                    beforeEach(() => {\n                        LawnMowingRow = wrapper.childAt(2);\n                    });\n\n                    it(\"is a LawnMowing Row\", () => {\n                        expect(LawnMowingRow.type()).toEqual(Grid.Row);\n                    });\n\n                    describe(\"LawnMowingSegment\", () => {\n                        let LawnMowingSegment;\n\n                        beforeEach(() => {\n                            LawnMowingSegment = LawnMowingRow.childAt(0);\n                        });\n\n                        it(\"is a LawnMowing Segment\", () => {\n                            expect(LawnMowingSegment.type()).toEqual(Segment);\n                        });\n\n                        describe(\"LawnMowingComponent\", () => {\n                            let LawnMowingComponent;\n\n                            beforeEach(() => {\n                                LawnMowingComponent = LawnMowingSegment.childAt(0);\n                            });\n\n                            it(\"is a LawnMowing\", () => {\n                                expect(LawnMowingComponent.type()).toEqual(RequestOptionComponent);\n                            });\n                            it(\"has the correct title\", () => {\n                                expect(LawnMowingComponent.props().title).toEqual(\"Lawn Mowing\");\n                            });\n                            it(\"has an imageURL\", () => {\n                                expect(LawnMowingComponent.props().imageURL).toBeTruthy();\n                            });\n                            it(\"has a onClick that uses function from redux\", () => {\n                                LawnMowingComponent.props().onClick();\n                                expect(setTypeOfRequest.mock.calls.length).toBe(1);\n                            })\n                        });\n                    });\n                });\n\n                describe(\"RakingRow\", () => {\n                    let RakingRow;\n\n                    beforeEach(() => {\n                        RakingRow = wrapper.childAt(3);\n                    });\n\n                    it(\"is a Raking Row\", () => {\n                        expect(RakingRow.type()).toEqual(Grid.Row);\n                    });\n\n                    describe(\"RakingSegment\", () => {\n                        let RakingSegment;\n\n                        beforeEach(() => {\n                            RakingSegment = RakingRow.childAt(0);\n                        });\n\n                        it(\"is a Raking Segment\", () => {\n                            expect(RakingSegment.type()).toEqual(Segment);\n                        });\n\n                        describe(\"RakingComponent\", () => {\n                            let RakingComponent;\n\n                            beforeEach(() => {\n                                RakingComponent = RakingSegment.childAt(0);\n                            });\n\n                            it(\"is a Raking Component\", () => {\n                                expect(RakingComponent.type()).toEqual(RequestOptionComponent);\n                            });\n                            it(\"has the correct title\", () => {\n                                expect(RakingComponent.props().title).toEqual(\"Leaf Raking\");\n                            });\n                            it(\"has an imageURL\", () => {\n                                expect(RakingComponent.props().imageURL).toBeTruthy();\n                            });\n                        });\n                    });\n                });\n\n                describe(\"snowClearingRow\", () => {\n                    let snowClearingRow;\n\n                    beforeEach(() => {\n                        snowClearingRow = wrapper.childAt(4);\n                    });\n\n                    it(\"is a snowClearing Row\", () => {\n                        expect(snowClearingRow.type()).toEqual(Grid.Row);\n                    });\n\n                    describe(\"snowClearingSegment\", () => {\n                        let snowClearingSegment;\n\n                        beforeEach(() => {\n                            snowClearingSegment = snowClearingRow.childAt(0);\n                        });\n\n                        it(\"is a snowClearing Segment\", () => {\n                            expect(snowClearingSegment.type()).toEqual(Segment);\n                        });\n\n                        describe(\"snowClearingComponent\", () => {\n                            let snowClearingComponent;\n\n                            beforeEach(() => {\n                                snowClearingComponent = snowClearingSegment.childAt(0);\n                            });\n\n                            it(\"is a snowClearing\", () => {\n                                expect(snowClearingComponent.type()).toEqual(RequestOptionComponent);\n                            });\n                            it(\"has the correct title\", () => {\n                                expect(snowClearingComponent.props().title).toEqual(\"Snow Clearing\");\n                            });\n                            it(\"has an imageURL\", () => {\n                                expect(snowClearingComponent.props().imageURL).toBeTruthy();\n                            });\n                        });\n                    });\n                });\n\n                describe(\"CustomRow\", () => {\n                    let CustomRow;\n\n                    beforeEach(() => {\n                        CustomRow = wrapper.childAt(5);\n                    });\n\n                    it(\"is a Custom Row\", () => {\n                        expect(CustomRow.type()).toEqual(Grid.Row);\n                    });\n\n                    describe(\"CustomSegment\", () => {\n                        let CustomSegment;\n\n                        beforeEach(() => {\n                            CustomSegment = CustomRow.childAt(0);\n                        });\n\n                        it(\"is a Custom Segment\", () => {\n                            expect(CustomSegment.type()).toEqual(Segment);\n                        });\n\n                        describe(\"CustomComponent\", () => {\n                            let CustomComponent;\n\n                            beforeEach(() => {\n                                CustomComponent = CustomSegment.childAt(0);\n                            });\n\n                            it(\"is a Custom\", () => {\n                                expect(CustomComponent.type()).toEqual(RequestOptionComponent);\n                            });\n                            it(\"has the correct title\", () => {\n                                expect(CustomComponent.props().title).toEqual(\"Custom Request\");\n                            });\n                            it(\"has an imageURL\", () => {\n                                expect(CustomComponent.props().imageURL).toBeTruthy();\n                            });\n                        });\n                    });\n                });\n            });\n"]}