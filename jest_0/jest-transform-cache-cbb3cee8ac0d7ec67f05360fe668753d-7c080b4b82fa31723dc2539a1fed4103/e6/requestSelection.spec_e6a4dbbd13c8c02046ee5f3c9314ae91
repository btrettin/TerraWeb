01a32c03feae531754b174766e2c6ac3
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzymeRedux = require('enzyme-redux');

var _reduxTestUtils = require('redux-test-utils');

var _reduxMockStore = require('redux-mock-store');

var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);

var _Actions = require('../../../src/reducers/Actions');

var _Actions2 = _interopRequireDefault(_Actions);

var _semanticUiReact = require('semantic-ui-react');

var _enzyme = require('enzyme');

var _requestSelection = require('../../../src/components/pages/pipeline/requestSelection');

var _requestSelection2 = _interopRequireDefault(_requestSelection);

var _breadcrumb = require('../../../src/components/helpers/breadcrumb');

var _breadcrumb2 = _interopRequireDefault(_breadcrumb);

var _RequestOption = require('../../../src/components/helpers/RequestOption');

var _RequestOption2 = _interopRequireDefault(_RequestOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("RequestSelection", function () {

    var wrapper = void 0;
    var setTypeOfRequest = jest.fn();
    var renderComponent = function renderComponent() {
        return (0, _enzyme.shallow)(_react2.default.createElement(_requestSelection2.default, { setTypeOfRequest: setTypeOfRequest }));
    };

    beforeEach(function () {
        wrapper = renderComponent();
    });

    it("is wrapped in a Grid Container", function () {
        expect(wrapper.type()).toEqual(_semanticUiReact.Grid);
    });

    it("is styled as a container Grid", function () {
        expect(wrapper.props().container).toBeTruthy();
    });

    it("contains five rows", function () {
        expect.assertions(6);

        var GridRows = wrapper.children();

        GridRows.forEach(function (row) {
            expect(row.type()).toEqual(_semanticUiReact.Grid.Row);
        });
    });

    describe("BreadcrumbRow", function () {
        var BreadcrumbRow = void 0;

        beforeEach(function () {
            BreadcrumbRow = wrapper.childAt(0);
        });

        it("is a Breadcrumb Row", function () {
            expect(BreadcrumbRow.type()).toEqual(_semanticUiReact.Grid.Row);
        });

        describe("BreadcrumbSegment", function () {
            var BreadcrumbSegment = void 0;

            beforeEach(function () {
                BreadcrumbSegment = BreadcrumbRow.childAt(0);
            });

            it("is a Breadcrumb Segment", function () {
                expect(BreadcrumbSegment.type()).toEqual(_semanticUiReact.Segment);
            });

            describe("BreadcrumbComponent", function () {
                var Breadcrumb = void 0;

                beforeEach(function () {
                    Breadcrumb = BreadcrumbSegment.childAt(0);
                });

                it("is a breadcrumb", function () {
                    expect(Breadcrumb.type()).toEqual(_breadcrumb2.default);
                });

                it("has an active step", function () {
                    expect(Breadcrumb.props().activeStep).toEqual(0);
                });
            });
        });
    });

    describe("HeaderRow", function () {
        var HeaderRow = void 0;

        beforeEach(function () {
            HeaderRow = wrapper.childAt(1);
        });

        it("is a Header Row", function () {
            expect(HeaderRow.type()).toEqual(_semanticUiReact.Grid.Row);
        });

        describe("HeaderSegment", function () {
            var HeaderSegment = void 0;

            beforeEach(function () {
                HeaderSegment = HeaderRow.childAt(0);
            });

            it("is a Header Segment", function () {
                expect(HeaderSegment.type()).toEqual(_semanticUiReact.Segment);
            });

            describe("Header", function () {
                var header = void 0;

                beforeEach(function () {
                    header = HeaderSegment.childAt(0);
                });

                it("is a Header", function () {
                    expect(header.type()).toEqual(_semanticUiReact.Header);
                });

                it("is a Header", function () {
                    expect(header.props().as).toEqual("h2");
                });

                describe("SubHeader", function () {
                    var subHeader = void 0;

                    beforeEach(function () {
                        subHeader = header.childAt(0);
                    });

                    it("is a SubHeader", function () {
                        expect(subHeader.type()).toEqual(_semanticUiReact.Header.SubHeader);
                    });
                });
            });
        });
    });describe("LawnMowingRow", function () {
        var LawnMowingRow = void 0;

        beforeEach(function () {
            LawnMowingRow = wrapper.childAt(2);
        });

        it("is a LawnMowing Row", function () {
            expect(LawnMowingRow.type()).toEqual(_semanticUiReact.Grid.Row);
        });

        describe("LawnMowingSegment", function () {
            var LawnMowingSegment = void 0;

            beforeEach(function () {
                LawnMowingSegment = LawnMowingRow.childAt(0);
            });

            it("is a LawnMowing Segment", function () {
                expect(LawnMowingSegment.type()).toEqual(_semanticUiReact.Segment);
            });

            describe("LawnMowingComponent", function () {
                var LawnMowingComponent = void 0;

                beforeEach(function () {
                    LawnMowingComponent = LawnMowingSegment.childAt(0);
                });

                it("is a LawnMowing", function () {
                    expect(LawnMowingComponent.type()).toEqual(_RequestOption2.default);
                });
                it("has the correct title", function () {
                    expect(LawnMowingComponent.props().title).toEqual("Lawn Mowing");
                });
                it("has an imageURL", function () {
                    expect(LawnMowingComponent.props().imageURL).toBeTruthy();
                });
                it("has a onClick that uses function from redux", function () {
                    LawnMowingComponent.props().onClick();
                    expect(setTypeOfRequest.mock.calls.length).toBe(1);
                });
            });
        });
    });

    describe("RakingRow", function () {
        var RakingRow = void 0;

        beforeEach(function () {
            RakingRow = wrapper.childAt(3);
        });

        it("is a Raking Row", function () {
            expect(RakingRow.type()).toEqual(_semanticUiReact.Grid.Row);
        });

        describe("RakingSegment", function () {
            var RakingSegment = void 0;

            beforeEach(function () {
                RakingSegment = RakingRow.childAt(0);
            });

            it("is a Raking Segment", function () {
                expect(RakingSegment.type()).toEqual(_semanticUiReact.Segment);
            });

            describe("RakingComponent", function () {
                var RakingComponent = void 0;

                beforeEach(function () {
                    RakingComponent = RakingSegment.childAt(0);
                });

                it("is a Raking Component", function () {
                    expect(RakingComponent.type()).toEqual(_RequestOption2.default);
                });
                it("has the correct title", function () {
                    expect(RakingComponent.props().title).toEqual("Leaf Raking");
                });
                it("has an imageURL", function () {
                    expect(RakingComponent.props().imageURL).toBeTruthy();
                });
            });
        });
    });

    describe("snowClearingRow", function () {
        var snowClearingRow = void 0;

        beforeEach(function () {
            snowClearingRow = wrapper.childAt(4);
        });

        it("is a snowClearing Row", function () {
            expect(snowClearingRow.type()).toEqual(_semanticUiReact.Grid.Row);
        });

        describe("snowClearingSegment", function () {
            var snowClearingSegment = void 0;

            beforeEach(function () {
                snowClearingSegment = snowClearingRow.childAt(0);
            });

            it("is a snowClearing Segment", function () {
                expect(snowClearingSegment.type()).toEqual(_semanticUiReact.Segment);
            });

            describe("snowClearingComponent", function () {
                var snowClearingComponent = void 0;

                beforeEach(function () {
                    snowClearingComponent = snowClearingSegment.childAt(0);
                });

                it("is a snowClearing", function () {
                    expect(snowClearingComponent.type()).toEqual(_RequestOption2.default);
                });
                it("has the correct title", function () {
                    expect(snowClearingComponent.props().title).toEqual("Snow Clearing");
                });
                it("has an imageURL", function () {
                    expect(snowClearingComponent.props().imageURL).toBeTruthy();
                });
            });
        });
    });

    describe("CustomRow", function () {
        var CustomRow = void 0;

        beforeEach(function () {
            CustomRow = wrapper.childAt(5);
        });

        it("is a Custom Row", function () {
            expect(CustomRow.type()).toEqual(_semanticUiReact.Grid.Row);
        });

        describe("CustomSegment", function () {
            var CustomSegment = void 0;

            beforeEach(function () {
                CustomSegment = CustomRow.childAt(0);
            });

            it("is a Custom Segment", function () {
                expect(CustomSegment.type()).toEqual(_semanticUiReact.Segment);
            });

            describe("CustomComponent", function () {
                var CustomComponent = void 0;

                beforeEach(function () {
                    CustomComponent = CustomSegment.childAt(0);
                });

                it("is a Custom", function () {
                    expect(CustomComponent.type()).toEqual(_RequestOption2.default);
                });
                it("has the correct title", function () {
                    expect(CustomComponent.props().title).toEqual("Custom Request");
                });
                it("has an imageURL", function () {
                    expect(CustomComponent.props().imageURL).toBeTruthy();
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3RTZWxlY3Rpb24uc3BlYy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIndyYXBwZXIiLCJzZXRUeXBlT2ZSZXF1ZXN0IiwiamVzdCIsImZuIiwicmVuZGVyQ29tcG9uZW50IiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwidHlwZSIsInRvRXF1YWwiLCJHcmlkIiwicHJvcHMiLCJjb250YWluZXIiLCJ0b0JlVHJ1dGh5IiwiYXNzZXJ0aW9ucyIsIkdyaWRSb3dzIiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwicm93IiwiUm93IiwiQnJlYWRjcnVtYlJvdyIsImNoaWxkQXQiLCJCcmVhZGNydW1iU2VnbWVudCIsIlNlZ21lbnQiLCJCcmVhZGNydW1iIiwiQnJlYWRjcnVtYkNvbXBvbmVudCIsImFjdGl2ZVN0ZXAiLCJIZWFkZXJSb3ciLCJIZWFkZXJTZWdtZW50IiwiaGVhZGVyIiwiSGVhZGVyIiwiYXMiLCJzdWJIZWFkZXIiLCJTdWJIZWFkZXIiLCJMYXduTW93aW5nUm93IiwiTGF3bk1vd2luZ1NlZ21lbnQiLCJMYXduTW93aW5nQ29tcG9uZW50IiwiUmVxdWVzdE9wdGlvbkNvbXBvbmVudCIsInRpdGxlIiwiaW1hZ2VVUkwiLCJvbkNsaWNrIiwibW9jayIsImNhbGxzIiwibGVuZ3RoIiwidG9CZSIsIlJha2luZ1JvdyIsIlJha2luZ1NlZ21lbnQiLCJSYWtpbmdDb21wb25lbnQiLCJzbm93Q2xlYXJpbmdSb3ciLCJzbm93Q2xlYXJpbmdTZWdtZW50Iiwic25vd0NsZWFyaW5nQ29tcG9uZW50IiwiQ3VzdG9tUm93IiwiQ3VzdG9tU2VnbWVudCIsIkN1c3RvbUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFVQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBQSxTQUFTLGtCQUFULEVBQTZCLFlBQU07O0FBRXZCLFFBQUlDLGdCQUFKO0FBQ0EsUUFBTUMsbUJB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aWxlIjoicmVxdWVzdFNlbGVjdGlvbi5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgc2hhbGxvd1dpdGhTdG9yZSB9IGZyb20gJ2VuenltZS1yZWR1eCc7XG5pbXBvcnQgeyBjcmVhdGVNb2NrU3RvcmUgfSBmcm9tICdyZWR1eC10ZXN0LXV0aWxzJztcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICdyZWR1eC1tb2NrLXN0b3JlJztcbmltcG9ydCBBY3Rpb25zIGZyb20gJy4uLy4uLy4uL3NyYy9yZWR1Y2Vycy9BY3Rpb25zJztcbmltcG9ydCB7XG4gICAgTWVudSxcbiAgICBNb2RhbCxcbiAgICBHcmlkLFxuICAgIElucHV0LFxuICAgIEJ1dHRvbixcbiAgICBGb3JtLFxuICAgIFNlZ21lbnQsXG4gICAgSGVhZGVyXG59IGZyb20gXCJzZW1hbnRpYy11aS1yZWFjdFwiO1xuaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gXCJlbnp5bWVcIjtcbmltcG9ydCBSZXF1ZXN0U2VsZWN0aW9uQ29tcG9uZW50IGZyb20gXCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9wYWdlcy9waXBlbGluZS9yZXF1ZXN0U2VsZWN0aW9uXCI7XG5pbXBvcnQgQnJlYWRjcnVtYkNvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvaGVscGVycy9icmVhZGNydW1iXCI7XG5pbXBvcnQgUmVxdWVzdE9wdGlvbkNvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvaGVscGVycy9SZXF1ZXN0T3B0aW9uXCI7XG5cbmRlc2NyaWJlKFwiUmVxdWVzdFNlbGVjdGlvblwiLCAoKSA9PiB7XG5cbiAgICAgICAgICAgIGxldCB3cmFwcGVyO1xuICAgICAgICAgICAgY29uc3Qgc2V0VHlwZU9mUmVxdWVzdCA9IGplc3QuZm4oKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlckNvbXBvbmVudCA9ICgpID0+IHNoYWxsb3coIDwgUmVxdWVzdFNlbGVjdGlvbkNvbXBvbmVudCBzZXRUeXBlT2ZSZXF1ZXN0ID0geyBzZXRUeXBlT2ZSZXF1ZXN0IH0gLz4pO1xuXG4gICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZXIgPSByZW5kZXJDb21wb25lbnQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KFwiaXMgd3JhcHBlZCBpbiBhIEdyaWQgQ29udGFpbmVyXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHdyYXBwZXIudHlwZSgpKS50b0VxdWFsKEdyaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaXQoXCJpcyBzdHlsZWQgYXMgYSBjb250YWluZXIgR3JpZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCh3cmFwcGVyLnByb3BzKCkuY29udGFpbmVyKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpdChcImNvbnRhaW5zIGZpdmUgcm93c1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdC5hc3NlcnRpb25zKDYpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IEdyaWRSb3dzID0gd3JhcHBlci5jaGlsZHJlbigpO1xuXG4gICAgICAgICAgICAgICAgICAgIEdyaWRSb3dzLmZvckVhY2gocm93ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyb3cudHlwZSgpKS50b0VxdWFsKEdyaWQuUm93KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZXNjcmliZShcIkJyZWFkY3J1bWJSb3dcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgQnJlYWRjcnVtYlJvdztcblxuICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEJyZWFkY3J1bWJSb3cgPSB3cmFwcGVyLmNoaWxkQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGl0KFwiaXMgYSBCcmVhZGNydW1iIFJvd1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoQnJlYWRjcnVtYlJvdy50eXBlKCkpLnRvRXF1YWwoR3JpZC5Sb3cpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZShcIkJyZWFkY3J1bWJTZWdtZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBCcmVhZGNydW1iU2VnbWVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQnJlYWRjcnVtYlNlZ21lbnQgPSBCcmVhZGNydW1iUm93LmNoaWxkQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXQoXCJpcyBhIEJyZWFkY3J1bWIgU2VnbWVudFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KEJyZWFkY3J1bWJTZWdtZW50LnR5cGUoKSkudG9FcXVhbChTZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZShcIkJyZWFkY3J1bWJDb21wb25lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBCcmVhZGNydW1iO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJyZWFkY3J1bWIgPSBCcmVhZGNydW1iU2VnbWVudC5jaGlsZEF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoXCJpcyBhIGJyZWFkY3J1bWJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoQnJlYWRjcnVtYi50eXBlKCkpLnRvRXF1YWwoQnJlYWRjcnVtYkNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdChcImhhcyBhbiBhY3RpdmUgc3RlcFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChCcmVhZGNydW1iLnByb3BzKCkuYWN0aXZlU3RlcCkudG9FcXVhbCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRlc2NyaWJlKFwiSGVhZGVyUm93XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IEhlYWRlclJvdztcblxuICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlclJvdyA9IHdyYXBwZXIuY2hpbGRBdCgxKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaXQoXCJpcyBhIEhlYWRlciBSb3dcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KEhlYWRlclJvdy50eXBlKCkpLnRvRXF1YWwoR3JpZC5Sb3cpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZShcIkhlYWRlclNlZ21lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IEhlYWRlclNlZ21lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlclNlZ21lbnQgPSBIZWFkZXJSb3cuY2hpbGRBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdChcImlzIGEgSGVhZGVyIFNlZ21lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChIZWFkZXJTZWdtZW50LnR5cGUoKSkudG9FcXVhbChTZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZShcIkhlYWRlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIgPSBIZWFkZXJTZWdtZW50LmNoaWxkQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdChcImlzIGEgSGVhZGVyXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KGhlYWRlci50eXBlKCkpLnRvRXF1YWwoSGVhZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaXMgYSBIZWFkZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoaGVhZGVyLnByb3BzKCkuYXMpLnRvRXF1YWwoXCJoMlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKFwiU3ViSGVhZGVyXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN1YkhlYWRlcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YkhlYWRlciA9IGhlYWRlci5jaGlsZEF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdChcImlzIGEgU3ViSGVhZGVyXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdWJIZWFkZXIudHlwZSgpKS50b0VxdWFsKEhlYWRlci5TdWJIZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTsgZGVzY3JpYmUoXCJMYXduTW93aW5nUm93XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IExhd25Nb3dpbmdSb3c7XG5cbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMYXduTW93aW5nUm93ID0gd3JhcHBlci5jaGlsZEF0KDIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpdChcImlzIGEgTGF3bk1vd2luZyBSb3dcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KExhd25Nb3dpbmdSb3cudHlwZSgpKS50b0VxdWFsKEdyaWQuUm93KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoXCJMYXduTW93aW5nU2VnbWVudFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgTGF3bk1vd2luZ1NlZ21lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhd25Nb3dpbmdTZWdtZW50ID0gTGF3bk1vd2luZ1Jvdy5jaGlsZEF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaXMgYSBMYXduTW93aW5nIFNlZ21lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChMYXduTW93aW5nU2VnbWVudC50eXBlKCkpLnRvRXF1YWwoU2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoXCJMYXduTW93aW5nQ29tcG9uZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgTGF3bk1vd2luZ0NvbXBvbmVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYXduTW93aW5nQ29tcG9uZW50ID0gTGF3bk1vd2luZ1NlZ21lbnQuY2hpbGRBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaXMgYSBMYXduTW93aW5nXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KExhd25Nb3dpbmdDb21wb25lbnQudHlwZSgpKS50b0VxdWFsKFJlcXVlc3RPcHRpb25Db21wb25lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaGFzIHRoZSBjb3JyZWN0IHRpdGxlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KExhd25Nb3dpbmdDb21wb25lbnQucHJvcHMoKS50aXRsZSkudG9FcXVhbChcIkxhd24gTW93aW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaGFzIGFuIGltYWdlVVJMXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KExhd25Nb3dpbmdDb21wb25lbnQucHJvcHMoKS5pbWFnZVVSTCkudG9CZVRydXRoeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaGFzIGEgb25DbGljayB0aGF0IHVzZXMgZnVuY3Rpb24gZnJvbSByZWR1eFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhd25Nb3dpbmdDb21wb25lbnQucHJvcHMoKS5vbkNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzZXRUeXBlT2ZSZXF1ZXN0Lm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZXNjcmliZShcIlJha2luZ1Jvd1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBSYWtpbmdSb3c7XG5cbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBSYWtpbmdSb3cgPSB3cmFwcGVyLmNoaWxkQXQoMyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGl0KFwiaXMgYSBSYWtpbmcgUm93XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChSYWtpbmdSb3cudHlwZSgpKS50b0VxdWFsKEdyaWQuUm93KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoXCJSYWtpbmdTZWdtZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBSYWtpbmdTZWdtZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSYWtpbmdTZWdtZW50ID0gUmFraW5nUm93LmNoaWxkQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXQoXCJpcyBhIFJha2luZyBTZWdtZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoUmFraW5nU2VnbWVudC50eXBlKCkpLnRvRXF1YWwoU2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoXCJSYWtpbmdDb21wb25lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBSYWtpbmdDb21wb25lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmFraW5nQ29tcG9uZW50ID0gUmFraW5nU2VnbWVudC5jaGlsZEF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoXCJpcyBhIFJha2luZyBDb21wb25lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoUmFraW5nQ29tcG9uZW50LnR5cGUoKSkudG9FcXVhbChSZXF1ZXN0T3B0aW9uQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdChcImhhcyB0aGUgY29ycmVjdCB0aXRsZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChSYWtpbmdDb21wb25lbnQucHJvcHMoKS50aXRsZSkudG9FcXVhbChcIkxlYWYgUmFraW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaGFzIGFuIGltYWdlVVJMXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KFJha2luZ0NvbXBvbmVudC5wcm9wcygpLmltYWdlVVJMKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZXNjcmliZShcInNub3dDbGVhcmluZ1Jvd1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzbm93Q2xlYXJpbmdSb3c7XG5cbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbm93Q2xlYXJpbmdSb3cgPSB3cmFwcGVyLmNoaWxkQXQoNCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGl0KFwiaXMgYSBzbm93Q2xlYXJpbmcgUm93XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzbm93Q2xlYXJpbmdSb3cudHlwZSgpKS50b0VxdWFsKEdyaWQuUm93KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoXCJzbm93Q2xlYXJpbmdTZWdtZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzbm93Q2xlYXJpbmdTZWdtZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbm93Q2xlYXJpbmdTZWdtZW50ID0gc25vd0NsZWFyaW5nUm93LmNoaWxkQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXQoXCJpcyBhIHNub3dDbGVhcmluZyBTZWdtZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc25vd0NsZWFyaW5nU2VnbWVudC50eXBlKCkpLnRvRXF1YWwoU2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoXCJzbm93Q2xlYXJpbmdDb21wb25lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzbm93Q2xlYXJpbmdDb21wb25lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc25vd0NsZWFyaW5nQ29tcG9uZW50ID0gc25vd0NsZWFyaW5nU2VnbWVudC5jaGlsZEF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoXCJpcyBhIHNub3dDbGVhcmluZ1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzbm93Q2xlYXJpbmdDb21wb25lbnQudHlwZSgpKS50b0VxdWFsKFJlcXVlc3RPcHRpb25Db21wb25lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaGFzIHRoZSBjb3JyZWN0IHRpdGxlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHNub3dDbGVhcmluZ0NvbXBvbmVudC5wcm9wcygpLnRpdGxlKS50b0VxdWFsKFwiU25vdyBDbGVhcmluZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdChcImhhcyBhbiBpbWFnZVVSTFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzbm93Q2xlYXJpbmdDb21wb25lbnQucHJvcHMoKS5pbWFnZVVSTCkudG9CZVRydXRoeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZGVzY3JpYmUoXCJDdXN0b21Sb3dcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgQ3VzdG9tUm93O1xuXG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ3VzdG9tUm93ID0gd3JhcHBlci5jaGlsZEF0KDUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpdChcImlzIGEgQ3VzdG9tIFJvd1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoQ3VzdG9tUm93LnR5cGUoKSkudG9FcXVhbChHcmlkLlJvdyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKFwiQ3VzdG9tU2VnbWVudFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgQ3VzdG9tU2VnbWVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VzdG9tU2VnbWVudCA9IEN1c3RvbVJvdy5jaGlsZEF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaXMgYSBDdXN0b20gU2VnbWVudFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KEN1c3RvbVNlZ21lbnQudHlwZSgpKS50b0VxdWFsKFNlZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKFwiQ3VzdG9tQ29tcG9uZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgQ3VzdG9tQ29tcG9uZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1c3RvbUNvbXBvbmVudCA9IEN1c3RvbVNlZ21lbnQuY2hpbGRBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaXMgYSBDdXN0b21cIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoQ3VzdG9tQ29tcG9uZW50LnR5cGUoKSkudG9FcXVhbChSZXF1ZXN0T3B0aW9uQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdChcImhhcyB0aGUgY29ycmVjdCB0aXRsZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChDdXN0b21Db21wb25lbnQucHJvcHMoKS50aXRsZSkudG9FcXVhbChcIkN1c3RvbSBSZXF1ZXN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KFwiaGFzIGFuIGltYWdlVVJMXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KEN1c3RvbUNvbXBvbmVudC5wcm9wcygpLmltYWdlVVJMKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiJdfQ==