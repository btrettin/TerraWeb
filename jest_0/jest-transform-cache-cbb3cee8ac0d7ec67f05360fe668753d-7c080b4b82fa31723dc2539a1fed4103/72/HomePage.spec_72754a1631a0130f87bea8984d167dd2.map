{"version":3,"sources":["HomePage.spec.js"],"names":["describe","wrapper","chance","renderComponent","props","setEmail","jest","fn","setPassword","setFirstName","setLastName","setPasswordRepeat","setAddress","setCity","setAddressState","setZipcode","openLoginModal","closeLoginModal","isLoginModalOpen","bool","openSignupModal","closeSignupModal","isSignupModalOpen","beforeEach","Chance","childAt","it","expect","type","toEqual","navbar","Menu","secondary","toBeTruthy","loginSignupButtonContainer","position","loginModal","Modal","size","mockCloseLoginModal","loginModalOnCloseHandler","onClose","toHaveBeenCalledTimes","closeIcon","loginModalTrigger","trigger","expectedType","mockOpenLoginModal","loginModalTriggerOnClickHandler","onClick","loginModalTriggerText","text","loginModalHeader","Header","loginModalHeaderText","loginModalDescription","Description","loginModalDescriptionGrid","Grid","loginModalDescriptionGridRows","children","forEach","row","Row","loginButtonRow","centered"],"mappings":"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","file":"HomePage.spec.js","sourcesContent":["import { shallow } from \"enzyme\";\nimport { Menu, Modal, Grid } from \"semantic-ui-react\";\nimport chance from \"chance\";\nimport React from \"react\";\nimport HomePage from \"../../../src/components/pages/HomePage\";\n\ndescribe(\"Home Page\", () => {\n    let wrapper, chance;\n\n    const renderComponent = (props = {}) =>\n        shallow(\n            <HomePage\n        setEmail={props.setEmail || jest.fn()}\n        setPassword={props.setPassword || jest.fn()}\n        setFirstName={props.setFirstName || jest.fn()}\n        setLastName={props.setLastName || jest.fn()}\n        setPasswordRepeat={props.setPasswordRepeat || jest.fn()}\n        setAddress={props.setAddress || jest.fn()}\n        setCity={props.setCity || jest.fn()}\n        setAddressState={props.setAddressState || jest.fn()}\n        setZipcode={props.setZipcode || jest.fn()}\n        openLoginModal={props.openLoginModal || jest.fn()}\n        closeLoginModal={props.closeLoginModal || jest.fn()}\n        isLoginModalOpen={props.isLoginModalOpen || chance.bool()}\n        openSignupModal={props.openSignupModal || jest.fn()}\n        closeSignupModal={props.closeSignupModal || jest.fn()}\n        isSignupModalOpen={props.isSignupModalOpen || chance.bool()}\n      />\n        );\n\n    beforeEach(() => {\n        chance = Chance();\n        wrapper = renderComponent().childAt(0);\n    });\n\n    it(\"is wrapped in a div\", () => {\n        expect(wrapper.type()).toEqual(\"div\");\n    });\n\n    describe(\"Navbar\", () => {\n        let navbar;\n\n        beforeEach(() => {\n            navbar = wrapper.childAt(0);\n        });\n\n        it(\"is a menu\", () => {\n            expect(navbar.type()).toEqual(Menu);\n        });\n\n        it(\"is styled as a secondary menu\", () => {\n            expect(navbar.props().secondary).toBeTruthy();\n        });\n\n        describe(\"Login/Signup button container\", () => {\n            let loginSignupButtonContainer;\n\n            beforeEach(() => {\n                loginSignupButtonContainer = navbar.childAt(0);\n            });\n\n            it(\"is a menu subcomponent\", () => {\n                expect(loginSignupButtonContainer.type()).toEqual(Menu.Menu);\n            });\n\n            it(\"is positioned correctly\", () => {\n                expect(loginSignupButtonContainer.props().position).toEqual(\"right\");\n            });\n\n            describe(\"Login Modal\", () => {\n                let loginModal;\n\n                beforeEach(() => {\n                    loginModal = loginSignupButtonContainer.childAt(0);\n                });\n\n                it(\"is a modal\", () => {\n                    expect(loginModal.type()).toEqual(Modal);\n                });\n\n                it(\"is a mini modal\", () => {\n                    expect(loginModal.props().size).toEqual(\"mini\");\n                });\n\n                it(\"closes the model when closed\", () => {\n                    const mockCloseLoginModal = jest.fn();\n\n                    wrapper = renderComponent({\n                        closeLoginModal: mockCloseLoginModal\n                    }).childAt(0);\n                    navbar = wrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    loginModal = loginSignupButtonContainer.childAt(0);\n\n                    const loginModalOnCloseHandler = loginModal.props().onClose;\n\n                    loginModalOnCloseHandler();\n\n                    expect(mockCloseLoginModal).toHaveBeenCalledTimes(1);\n                });\n\n                it(\"displays a close modal button\", () => {\n                    expect(loginModal.props().closeIcon).toBeTruthy();\n                });\n\n                describe(\"Login Modal trigger\", () => {\n                    let loginModalTrigger;\n\n                    beforeEach(() => {\n                        loginModalTrigger = shallow(loginModal.props().trigger);\n                    });\n\n                    it(\"is a menu item\", () => {\n                        const expectedType = shallow(\n                            <Menu.Item onClick={jest.fn()} />\n                        ).type();\n\n                        expect(loginModalTrigger.type()).toEqual(expectedType);\n                    });\n\n                    it(\"opens the modal when clicked\", () => {\n                        const mockOpenLoginModal = jest.fn();\n\n                        wrapper = renderComponent({\n                            openLoginModal: mockOpenLoginModal\n                        }).childAt(0);\n                        navbar = wrapper.childAt(0);\n                        loginSignupButtonContainer = navbar.childAt(0);\n                        loginModal = loginSignupButtonContainer.childAt(0);\n                        loginModalTrigger = shallow(loginModal.props().trigger);\n\n                        const loginModalTriggerOnClickHandler = loginModalTrigger.props()\n                            .onClick;\n\n                        loginModalTriggerOnClickHandler();\n\n                        expect(mockOpenLoginModal).toHaveBeenCalledTimes(1);\n                    });\n\n                    it(\"displays the correct word\", () => {\n                        const loginModalTriggerText = loginModalTrigger.childAt(0);\n\n                        expect(loginModalTriggerText.text()).toEqual(\"Login\");\n                    });\n                });\n\n                describe(\"Login Modal Header\", () => {\n                    let loginModalHeader;\n\n                    beforeEach(() => {\n                        loginModalHeader = loginModal.childAt(0);\n                    });\n\n                    it(\"is a modal header\", () => {\n                        expect(loginModalHeader.type()).toEqual(Modal.Header);\n                    });\n\n                    it(\"displays the correct text\", () => {\n                        const loginModalHeaderText = loginModalHeader.childAt(0);\n\n                        expect(loginModalHeaderText.text()).toEqual(\"Welcome Back!\");\n                    });\n                });\n\n                describe(\"Login Modal Description\", () => {\n                    let loginModalDescription;\n\n                    beforeEach(() => {\n                        loginModalDescription = loginModal.childAt(1);\n                    });\n\n                    it(\"is a modal description\", () => {\n                        expect(loginModalDescription.type()).toEqual(Modal.Description);\n                    });\n\n                    describe(\"Login Modal Description Grid\", () => {\n                        let loginModalDescriptionGrid;\n\n                        beforeEach(() => {\n                            loginModalDescriptionGrid = loginModalDescription.childAt(0);\n                        });\n\n                        it(\"is a grid\", () => {\n                            expect(loginModalDescriptionGrid.type()).toEqual(Grid);\n                        });\n\n                        it(\"contains three rows\", () => {\n                            const loginModalDescriptionGridRows = loginModalDescriptionGrid.children();\n\n                            loginModalDescriptionGridRows.forEach(row => {\n                                expect(row.type()).toEqual(Grid.Row);\n                            });\n                        });\n\n                        it(\"contains a row for the login button that is centered\", () => {\n                            const loginButtonRow = loginModalDescriptionGrid.childAt(2);\n\n                            expect(loginButtonRow.props().centered).toBeTruthy();\n                        });\n                    });\n                });\n            });\n        });\n    });\n});\n"]}