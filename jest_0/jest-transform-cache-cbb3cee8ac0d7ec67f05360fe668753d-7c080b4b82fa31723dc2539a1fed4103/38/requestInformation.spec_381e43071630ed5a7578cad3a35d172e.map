{"version":3,"sources":["requestInformation.spec.js"],"names":["describe","wrapper","renderComponent","beforeEach","it","expect","type","toEqual","Grid","props","container","toBeTruthy","assertions","GridRows","children","forEach","row","Row","BreadcrumbRow","childAt","BreadcrumbSegment","Segment","Breadcrumb","BreadcrumbComponent","activeStep","FormRow","FormSegment","Form","DynamicFormComponent"],"mappings":"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","file":"requestInformation.spec.js","sourcesContent":["import React from \"react\";\nimport {\n    Menu\n    , Modal\n    , Grid\n    , Input\n    , Button\n    , Form\n    , Segment\n    , Header\n} from \"semantic-ui-react\";\nimport { shallow } from \"enzyme\";\nimport Chance from \"chance\";\nimport RequestInformationComponent from \"../../../src/components/pages/pipeline/requestInformation\";\nimport BreadcrumbComponent from \"../../../src/components/helpers/breadcrumb\";\nimport DynamicFormComponent from \"../../../src/components/helpers/DynamicForm\";\n\ndescribe(\"RequestInformation\", () => {\n    let wrapper;\n\n    const renderComponent = () => shallow(<RequestInformationComponent typeOfRequest=\"Lawn Mowing\"/>);\n\n    beforeEach(() => {\n        wrapper = renderComponent();\n    });\n\n    it(\"is wrapped in a Grid Container\", () => {\n        expect(wrapper.type()).toEqual(Grid);\n    });\n\n    it(\"is styled as a container Grid\", () => {\n        expect(wrapper.props().container).toBeTruthy();\n    });\n\n    it(\"contains two rows\", () => {\n        expect.assertions(2);\n\n        const GridRows = wrapper.children();\n\n        GridRows.forEach(row => {\n            expect(row.type()).toEqual(Grid.Row);\n        });\n    });\n\n    describe(\"BreadcrumbRow\", () => {\n        let BreadcrumbRow;\n\n        beforeEach(() => {\n            BreadcrumbRow = wrapper.childAt(0);\n        });\n\n        it(\"is a Breadcrumb Row\", () => {\n            expect(BreadcrumbRow.type()).toEqual(Grid.Row);\n        });\n\n        describe(\"BreadcrumbSegment\", () => {\n            let BreadcrumbSegment;\n\n            beforeEach(() => {\n                BreadcrumbSegment = BreadcrumbRow.childAt(0);\n            });\n\n            it(\"is a Breadcrumb Segment\", () => {\n                expect(BreadcrumbSegment.type()).toEqual(Segment);\n            });\n\n            describe(\"BreadcrumbComponent\", () => {\n                let Breadcrumb;\n\n                beforeEach(() => {\n                    Breadcrumb = BreadcrumbSegment.childAt(0);\n                });\n\n                it(\"is a breadcrumb\", () => {\n                    expect(Breadcrumb.type()).toEqual(BreadcrumbComponent);\n                });\n                it(\"has an active step\", () => {\n                    expect(Breadcrumb.props().activeStep).toEqual(1);\n                });\n            });\n        });\n    });\n\n    describe(\"FormRow\", () => {\n        let FormRow;\n\n        beforeEach(() => {\n            FormRow = wrapper.childAt(1);\n        });\n\n        it(\"is a Form Row\", () => {\n            expect(FormRow.type()).toEqual(Grid.Row);\n        });\n\n        describe(\"FormSegment\", () => {\n            let FormSegment;\n\n            beforeEach(() => {\n                FormSegment = FormRow.childAt(0);\n            });\n\n            it(\"is a Form Segment\", () => {\n                expect(FormSegment.type()).toEqual(Segment);\n            });\n\n            describe(\"Form\", () => {\n                let Form;\n\n                beforeEach(() => {\n                    Form = FormSegment.childAt(0);\n                });\n\n                it(\"is a Form\", () => {\n                    expect(Form.type()).toEqual(DynamicFormComponent);\n                });\n            });\n        });\n    });\n});\n"]}