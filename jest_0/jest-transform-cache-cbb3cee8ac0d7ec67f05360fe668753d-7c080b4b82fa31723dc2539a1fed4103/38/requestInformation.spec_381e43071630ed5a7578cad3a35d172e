d21ddf4d95ac7cea1d431aa5aef32f36
"use strict";

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require("semantic-ui-react");

var _enzyme = require("enzyme");

var _chance = require("chance");

var _chance2 = _interopRequireDefault(_chance);

var _requestInformation = require("../../../src/components/pages/pipeline/requestInformation");

var _requestInformation2 = _interopRequireDefault(_requestInformation);

var _breadcrumb = require("../../../src/components/helpers/breadcrumb");

var _breadcrumb2 = _interopRequireDefault(_breadcrumb);

var _DynamicForm = require("../../../src/components/helpers/DynamicForm");

var _DynamicForm2 = _interopRequireDefault(_DynamicForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("RequestInformation", function () {
    var wrapper = void 0;

    var renderComponent = function renderComponent() {
        return (0, _enzyme.shallow)(_react2.default.createElement(_requestInformation2.default, { typeOfRequest: "Lawn Mowing" }));
    };

    beforeEach(function () {
        wrapper = renderComponent();
    });

    it("is wrapped in a Grid Container", function () {
        expect(wrapper.type()).toEqual(_semanticUiReact.Grid);
    });

    it("is styled as a container Grid", function () {
        expect(wrapper.props().container).toBeTruthy();
    });

    it("contains two rows", function () {
        expect.assertions(2);

        var GridRows = wrapper.children();

        GridRows.forEach(function (row) {
            expect(row.type()).toEqual(_semanticUiReact.Grid.Row);
        });
    });

    describe("BreadcrumbRow", function () {
        var BreadcrumbRow = void 0;

        beforeEach(function () {
            BreadcrumbRow = wrapper.childAt(0);
        });

        it("is a Breadcrumb Row", function () {
            expect(BreadcrumbRow.type()).toEqual(_semanticUiReact.Grid.Row);
        });

        describe("BreadcrumbSegment", function () {
            var BreadcrumbSegment = void 0;

            beforeEach(function () {
                BreadcrumbSegment = BreadcrumbRow.childAt(0);
            });

            it("is a Breadcrumb Segment", function () {
                expect(BreadcrumbSegment.type()).toEqual(_semanticUiReact.Segment);
            });

            describe("BreadcrumbComponent", function () {
                var Breadcrumb = void 0;

                beforeEach(function () {
                    Breadcrumb = BreadcrumbSegment.childAt(0);
                });

                it("is a breadcrumb", function () {
                    expect(Breadcrumb.type()).toEqual(_breadcrumb2.default);
                });
                it("has an active step", function () {
                    expect(Breadcrumb.props().activeStep).toEqual(1);
                });
            });
        });
    });

    describe("FormRow", function () {
        var FormRow = void 0;

        beforeEach(function () {
            FormRow = wrapper.childAt(1);
        });

        it("is a Form Row", function () {
            expect(FormRow.type()).toEqual(_semanticUiReact.Grid.Row);
        });

        describe("FormSegment", function () {
            var FormSegment = void 0;

            beforeEach(function () {
                FormSegment = FormRow.childAt(0);
            });

            it("is a Form Segment", function () {
                expect(FormSegment.type()).toEqual(_semanticUiReact.Segment);
            });

            describe("Form", function () {
                var Form = void 0;

                beforeEach(function () {
                    Form = FormSegment.childAt(0);
                });

                it("is a Form", function () {
                    expect(Form.type()).toEqual(_DynamicForm2.default);
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3RJbmZvcm1hdGlvbi5zcGVjLmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwid3JhcHBlciIsInJlbmRlckNvbXBvbmVudCIsImJlZm9yZUVhY2giLCJpdCIsImV4cGVjdCIsInR5cGUiLCJ0b0VxdWFsIiwiR3JpZCIsInByb3BzIiwiY29udGFpbmVyIiwidG9CZVRydXRoeSIsImFzc2VydGlvbnMiLCJHcmlkUm93cyIsImNoaWxkcmVuIiwiZm9yRWFjaCIsInJvdyIsIlJvdyIsIkJyZWFkY3J1bWJSb3ciLCJjaGlsZEF0IiwiQnJlYWRjcnVtYlNlZ21lbnQiLCJTZWdtZW50IiwiQnJlYWRjcnVtYiIsIkJyZWFkY3J1bWJDb21wb25lbnQiLCJhY3RpdmVTdGVwIiwiRm9ybVJvdyIsIkZvcm1TZWdtZW50IiwiRm9ybSIsIkR5bmFtaWNGb3JtQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7O0FBVUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBQSxTQUFTLG9CQUFULEVBQStCLFlBQU07QUFDakMsUUFBSUMsZ0JBQUo7O0FBRUEsUUFBTUMsa0JBQWtCLFNBQWxCQSxlQUFrQjtBQUFBLGVBQU0scUJBQVEsOEJBQUMsNEJBQUQsSUFBNkIsZUFBYyxhQUEzQyxHQUFSLENBQU47QUFBQSxLQUF4Qjs7QUFFQUMsZUFBVyxZQUFNO0FBQ2JGLGtCQUFVQyxpQkFBVjtBQUNILEtBRkQ7O0FBSUFFLE9BQUcsZ0NBQUgsRUFBcUMsWUFBTTtBQUN2Q0MsZUFBT0osUUFBUUssSUFBUixFQUFQLEVBQXVCQyxPQUF2QixDQUErQkMscUJBQS9CO0FBQ0gsS0FGRDs7QUFJQUosT0FBRywrQkFBSCxFQUFvQyxZQUFNO0FBQ3RDQyxlQUFPSixRQUFRUSxLQUFSLEdBQWdCQyxTQUF2QixFQUFrQ0MsVUFBbEM7QUFDSCxLQUZEOztBQUlBUCxPQUFHLG1CQUFILEVBQXdCLFlBQU07QUFDMUJDLGVBQU9PLFVBQVAsQ0FBa0IsQ0FBbEI7O0FBRUEsWUFBTUMsV0FBV1osUUFBUWEsUUFBUixFQUFqQjs7QUFFQUQsaUJBQVNFLE9BQVQsQ0FBaUIsZUFBTztBQUNwQlYsbUJBQU9XLElBQUlWLElBQUosRUFBUCxFQUFtQkMsT0FBbkIsQ0FBMkJDLHNCQUFLUyxHQUFoQztBQUNILFNBRkQ7QUFHSCxLQVJEOztBQVVBakIsYUFBUyxlQUFULEVBQTBCLFlBQU07QUFDNUIsWUFBSWtCLHNCQUFKOztBQUVBZixtQkFBVyxZQUFNO0FBQ2JlLDRCQUFnQmpCLFFBQVFrQixPQUFSLENBQWdCLENBQWhCLENBQWhCO0FBQ0gsU0FGRDs7QUFJQWYsV0FBRyxxQkFBSCxFQUEwQixZQUFNO0FBQzVCQyxtQkFBT2EsY0FBY1osSUFBZCxFQUFQLEVBQTZCQyxPQUE3QixDQUFxQ0Msc0JBQUtTLEdBQTFDO0FBQ0gsU0FGRDs7QUFJQWpCLGlCQUFTLG1CQUFULEVBQThCLFlBQU07QUFDaEMsZ0JBQUlvQiwwQkFBSjs7QUFFQWpCLHVCQUFXLFlBQU07QUFDYmlCLG9DQUFvQkYsY0FBY0MsT0FBZCxDQUFzQixDQUF0QixDQUFwQjtBQUNILGFBRkQ7O0FBSUFmLGVBQUcseUJBQUgsRUFBOEIsWUFBTTtBQUNoQ0MsdUJBQU9lLGtCQUFrQmQsSUFBbEIsRUFBUCxFQUFpQ0MsT0FBakMsQ0FBeUNjLHdCQUF6QztBQUNILGFBRkQ7O0FBSUFyQixxQkFBUyxxQkFBVCxFQUFnQyxZQUFNO0FBQ2xDLG9CQUFJc0IsbUJBQUo7O0FBRUFuQiwyQkFBVyxZQUFNO0FBQ2JtQixpQ0FBYUYsa0JBQWtCRCxPQUFsQixDQUEwQixDQUExQixDQUFiO0FBQ0gsaUJBRkQ7O0FBSUFmLG1CQUFHLGlCQUFILEVBQXNCLFlBQU07QUFDeEJDLDJCQUFPaUIsV0FBV2hCLElBQVgsRUFBUCxFQUEwQkMsT0FBMUIsQ0FBa0NnQixvQkFBbEM7QUFDSCxpQkFGRDtBQUdBbkIsbUJBQUcsb0JBQUgsRUFBeUIsWUFBTTtBQUMzQkMsMkJBQU9pQixXQUFXYixLQUFYLEdBQW1CZSxVQUExQixFQUFzQ2pCLE9BQXRDLENBQThDLENBQTlDO0FBQ0gsaUJBRkQ7QUFHSCxhQWJEO0FBY0gsU0F6QkQ7QUEwQkgsS0FyQ0Q7O0FBdUNBUCxhQUFTLFNBQVQsRUFBb0IsWUFBTTtBQUN0QixZQUFJeUIsZ0JBQUo7O0FBRUF0QixtQkFBVyxZQUFNO0FBQ2JzQixzQkFBVXhCLFFBQVFrQixPQUFSLENBQWdCLENBQWhCLENBQVY7QUFDSCxTQUZEOztBQUlBZixXQUFHLGVBQUgsRUFBb0IsWUFBTTtBQUN0QkMsbUJBQU9vQixRQUFRbkIsSUFBUixFQUFQLEVBQXVCQyxPQUF2QixDQUErQkMsc0JBQUtTLEdBQXBDO0FBQ0gsU0FGRDs7QUFJQWpCLGlCQUFTLGFBQVQsRUFBd0IsWUFBTTtBQUMxQixnQkFBSTBCLG9CQUFKOztBQUVBdkIsdUJBQVcsWUFBTTtBQUNidUIsOEJBQWNELFFBQVFOLE9BQVIsQ0FBZ0IsQ0FBaEIsQ0FBZDtBQUNILGFBRkQ7O0FBSUFmLGVBQUcsbUJBQUgsRUFBd0IsWUFBTTtBQUMxQkMsdUJBQU9xQixZQUFZcEIsSUFBWixFQUFQLEVBQTJCQyxPQUEzQixDQUFtQ2Msd0JBQW5DO0FBQ0gsYUFGRDs7QUFJQXJCLHFCQUFTLE1BQVQsRUFBaUIsWUFBTTtBQUNuQixvQkFBSTJCLGFBQUo7O0FBRUF4QiwyQkFBVyxZQUFNO0FBQ2J3QiwyQkFBT0QsWUFBWVAsT0FBWixDQUFvQixDQUFwQixDQUFQO0FBQ0gsaUJBRkQ7O0FBSUFmLG1CQUFHLFdBQUgsRUFBZ0IsWUFBTTtBQUNsQkMsMkJBQU9zQixLQUFLckIsSUFBTCxFQUFQLEVBQW9CQyxPQUFwQixDQUE0QnFCLHFCQUE1QjtBQUNILGlCQUZEO0FBR0gsYUFWRDtBQVdILFNBdEJEO0FBdUJILEtBbENEO0FBbUNILENBckdEIiwiZmlsZSI6InJlcXVlc3RJbmZvcm1hdGlvbi5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgICBNZW51XG4gICAgLCBNb2RhbFxuICAgICwgR3JpZFxuICAgICwgSW5wdXRcbiAgICAsIEJ1dHRvblxuICAgICwgRm9ybVxuICAgICwgU2VnbWVudFxuICAgICwgSGVhZGVyXG59IGZyb20gXCJzZW1hbnRpYy11aS1yZWFjdFwiO1xuaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gXCJlbnp5bWVcIjtcbmltcG9ydCBDaGFuY2UgZnJvbSBcImNoYW5jZVwiO1xuaW1wb3J0IFJlcXVlc3RJbmZvcm1hdGlvbkNvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcGFnZXMvcGlwZWxpbmUvcmVxdWVzdEluZm9ybWF0aW9uXCI7XG5pbXBvcnQgQnJlYWRjcnVtYkNvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvaGVscGVycy9icmVhZGNydW1iXCI7XG5pbXBvcnQgRHluYW1pY0Zvcm1Db21wb25lbnQgZnJvbSBcIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2hlbHBlcnMvRHluYW1pY0Zvcm1cIjtcblxuZGVzY3JpYmUoXCJSZXF1ZXN0SW5mb3JtYXRpb25cIiwgKCkgPT4ge1xuICAgIGxldCB3cmFwcGVyO1xuXG4gICAgY29uc3QgcmVuZGVyQ29tcG9uZW50ID0gKCkgPT4gc2hhbGxvdyg8UmVxdWVzdEluZm9ybWF0aW9uQ29tcG9uZW50IHR5cGVPZlJlcXVlc3Q9XCJMYXduIE1vd2luZ1wiLz4pO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHdyYXBwZXIgPSByZW5kZXJDb21wb25lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwiaXMgd3JhcHBlZCBpbiBhIEdyaWQgQ29udGFpbmVyXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHdyYXBwZXIudHlwZSgpKS50b0VxdWFsKEdyaWQpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJpcyBzdHlsZWQgYXMgYSBjb250YWluZXIgR3JpZFwiLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLnByb3BzKCkuY29udGFpbmVyKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBpdChcImNvbnRhaW5zIHR3byByb3dzXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0LmFzc2VydGlvbnMoMik7XG5cbiAgICAgICAgY29uc3QgR3JpZFJvd3MgPSB3cmFwcGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgR3JpZFJvd3MuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KHJvdy50eXBlKCkpLnRvRXF1YWwoR3JpZC5Sb3cpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwiQnJlYWRjcnVtYlJvd1wiLCAoKSA9PiB7XG4gICAgICAgIGxldCBCcmVhZGNydW1iUm93O1xuXG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgQnJlYWRjcnVtYlJvdyA9IHdyYXBwZXIuY2hpbGRBdCgwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJpcyBhIEJyZWFkY3J1bWIgUm93XCIsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChCcmVhZGNydW1iUm93LnR5cGUoKSkudG9FcXVhbChHcmlkLlJvdyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKFwiQnJlYWRjcnVtYlNlZ21lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IEJyZWFkY3J1bWJTZWdtZW50O1xuXG4gICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBCcmVhZGNydW1iU2VnbWVudCA9IEJyZWFkY3J1bWJSb3cuY2hpbGRBdCgwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcImlzIGEgQnJlYWRjcnVtYiBTZWdtZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QoQnJlYWRjcnVtYlNlZ21lbnQudHlwZSgpKS50b0VxdWFsKFNlZ21lbnQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlc2NyaWJlKFwiQnJlYWRjcnVtYkNvbXBvbmVudFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IEJyZWFkY3J1bWI7XG5cbiAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgQnJlYWRjcnVtYiA9IEJyZWFkY3J1bWJTZWdtZW50LmNoaWxkQXQoMCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpdChcImlzIGEgYnJlYWRjcnVtYlwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChCcmVhZGNydW1iLnR5cGUoKSkudG9FcXVhbChCcmVhZGNydW1iQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpdChcImhhcyBhbiBhY3RpdmUgc3RlcFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChCcmVhZGNydW1iLnByb3BzKCkuYWN0aXZlU3RlcCkudG9FcXVhbCgxKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwiRm9ybVJvd1wiLCAoKSA9PiB7XG4gICAgICAgIGxldCBGb3JtUm93O1xuXG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgRm9ybVJvdyA9IHdyYXBwZXIuY2hpbGRBdCgxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJpcyBhIEZvcm0gUm93XCIsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChGb3JtUm93LnR5cGUoKSkudG9FcXVhbChHcmlkLlJvdyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKFwiRm9ybVNlZ21lbnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IEZvcm1TZWdtZW50O1xuXG4gICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBGb3JtU2VnbWVudCA9IEZvcm1Sb3cuY2hpbGRBdCgwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcImlzIGEgRm9ybSBTZWdtZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QoRm9ybVNlZ21lbnQudHlwZSgpKS50b0VxdWFsKFNlZ21lbnQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlc2NyaWJlKFwiRm9ybVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IEZvcm07XG5cbiAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgRm9ybSA9IEZvcm1TZWdtZW50LmNoaWxkQXQoMCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpdChcImlzIGEgRm9ybVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChGb3JtLnR5cGUoKSkudG9FcXVhbChEeW5hbWljRm9ybUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==