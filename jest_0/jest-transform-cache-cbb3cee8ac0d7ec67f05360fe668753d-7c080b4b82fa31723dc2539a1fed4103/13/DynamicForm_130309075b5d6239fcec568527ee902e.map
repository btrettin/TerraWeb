{"version":3,"sources":["DynamicForm.js"],"names":["DynamicForm","props","onSubmit","event","data","counter","Requests","requestType","fields","forEach","element","type","id","options","option","target","checked","value","setRequestInformation","handleChange","e","setState","renderRadioButtons","field","radioButtons","map","state","renderFormFromJson","requests","formUI","name","placeholder","statekeys","Styles","segment","React","Component"],"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","file":"DynamicForm.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Header, Input, Button, Segment, Checkbox, Label } from \"semantic-ui-react\";\nimport{ Requests } from \"../pages/pipeline/jsonRequests\";\nimport { statekeys } from \"../../helpers/Common\";\nimport Styles from '../../styles/DynamicForm'\n\nclass DynamicForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n   onSubmit = (event) => {\n      const data = {};\n      let counter = 0;\n      Requests.Requests[this.props.requestType].fields.forEach((element) => {\n        switch(element.type) {\n          case \"radio\":\n            data[element.id] = {};\n            element.options.forEach((option) => {\n              data[element.id][option] = event.target[counter].checked;\n              counter += 1;\n            })\n          break;\n          case \"checkbox\":\n            data[element.id] = event.target[counter].checked;\n            counter += 1;\n          break;\n          default:\n            data[element.id] = event.target[counter].value;\n            counter += 1;\n          break;\n        }\n      })\n      this.props.setRequestInformation(data);\n  }\n\n  handleChange = (e, { value }) => this.setState({ value });\n\n  renderRadioButtons = (value, field) => {\n    const radioButtons = field.map(option => (\n      <Form.Radio\n        label={option}\n        value={option}\n        onChange={this.handleChange}\n        checked={this.state.value === option}\n      />\n    ));\n    return radioButtons\n  }\n\n  renderFormFromJson = requestType => {\n    const { value } = this.state;\n    const requests = Requests.Requests[requestType];\n    const formUI = requests.fields.map(field => {\n      switch (field.type) {\n        case \"text\":\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{field.name}</label>\n              <Input id={field.id} />\n            </Form.Field>\n          );\n\n        case \"dropDown\":\n          return (\n            <Form.Dropdown\n              label={field.name}\n              placeholder={field.placeholder}\n              options={statekeys}\n            />\n          );\n\n        case \"textArea\":\n          return (\n            <Form.TextArea\n              label={field.name}\n              placeholder={field.placeholder}\n            />\n          );\n\n        case \"checkbox\":\n          return (\n            <Form.Field>\n                <Checkbox\n                    name={field.name}\n                    value=\"true\"\n                    label={field.placeholder}\n                />\n            </Form.Field>\n          );\n\n        case \"radio\":\n          return (\n            <label htmlFor={field.id}> {field.name}\n              <Form.Group id={field.id} inline>\n                {this.renderRadioButtons(value, field.options)}\n                </Form.Group>\n             </label>\n          );\n\n        default:\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{field.name}</label>\n              <Input id={field.id} />\n            </Form.Field>\n          );\n      }\n    });\n    return formUI;\n  };\n\n  render() {\n    return (\n      <Segment padded>\n        <Header size=\"large\">{this.props.requestType}</Header>\n        <Form onSubmit={this.onSubmit}>\n          <Segment style={Styles.segment}>\n              {this.renderFormFromJson(this.props.requestType)}\n          </Segment>\n          <Segment style={Styles.segment}>\n              <Button type='submit' fluid positive size=\"large\">\n                  Continue\n              </Button>\n          </Segment>\n        </Form>\n      </Segment>\n    );\n  }\n}\n\nexport default DynamicForm;\n"]}