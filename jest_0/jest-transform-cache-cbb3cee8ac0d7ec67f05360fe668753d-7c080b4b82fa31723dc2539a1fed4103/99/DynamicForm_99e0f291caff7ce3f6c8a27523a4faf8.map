{"version":3,"sources":["DynamicForm.js"],"names":["DynamicForm","props","onSubmit","event","data","counter","Requests","requestType","fields","forEach","element","type","id","validation","options","option","entry","target","checked","value","validateAndSetStateErrorsForDisplay","setRequestInformation","errors","Object","values","validationEntryObject","trim","length","some","setState","keys","handleChange","e","state","radio","addAstricks","renderRadioButtons","field","radioButtons","map","renderFormFromJson","requests","formUI","name","placeholder","statekeys","Styles","segment","React","Component","propTypes","PropTypes","string","isRequired","func"],"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","file":"DynamicForm.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Header, Input, Button, Segment, Checkbox, TextArea, Dropdown } from 'semantic-ui-react';\nimport { Requests } from '../pages/pipeline/jsonRequests';\nimport { statekeys } from '../../helpers/Common';\nimport Styles from '../../styles/DynamicForm';\nimport InlineError from './InlineError';\n\nclass DynamicForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errors: {},\n    };\n  }\n\n  onSubmit = (event) => {\n    const data = {};\n    let counter = 0;\n    Requests.Requests[this.props.requestType].fields.forEach((element) => {\n      switch (element.type) {\n        case 'radio':\n          data[element.id] = {\n            validation: element.validation,\n            id: element.id,\n          };\n          element.options.forEach((option) => {\n            data[element.id][option] = {\n              entry: event.target[counter].checked,\n            };\n            counter += 1;\n          });\n          break;\n        case 'checkbox':\n          data[element.id] = {\n            entry: event.target[counter].checked,\n            validation: element.validation,\n            id: element.id,\n          };\n          break;\n        default:\n          data[element.id] = {\n            entry: event.target[counter].value,\n            validation: element.validation,\n            id: element.id,\n          };\n          break;\n      }\n      counter += 1;\n    });\n    if (!this.validateAndSetStateErrorsForDisplay(data)) {\n      this.props.setRequestInformation(data);\n    }\n  }\n\n   validateAndSetStateErrorsForDisplay = (data) => {\n     const errors = {};\n     Object.values(data).forEach((validationEntryObject) => {\n       switch (validationEntryObject.validation) {\n         case 'requiredText':\n           if (!validationEntryObject.entry.trim().length) {\n             errors[validationEntryObject.id] = 'Empty Text Box';\n           }\n           break;\n         case 'requiredRadio':\n           if (!Object.values(validationEntryObject).some((option => option.entry))) {\n             errors[validationEntryObject.id] = 'Radio Button Not Selected';\n           }\n           break;\n         default:\n       }\n     });\n     this.setState({ errors });\n     return !Object.keys(errors).length;\n   }\n\n   handleChange = (e, { value }) => {\n     const state = this.state;\n     state.radio = value;\n     this.setState(state);\n   }\n\n  addAstricks = (validation) => {\n    if (validation) {\n      return ' * ';\n    }\n    return '';\n  }\n\n  renderRadioButtons = (field) => {\n    const radioButtons = field.map(option => (\n      <Form.Radio\n        label={option}\n        value={option}\n        onChange={this.handleChange}\n        checked={this.state.radio === option}\n      />\n    ));\n    return radioButtons;\n  }\n\n  renderFormFromJson = (requestType, errors) => {\n    const requests = Requests.Requests[requestType];\n    const formUI = requests.fields.map((field) => {\n      switch (field.type) {\n        case 'text':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>\n                {this.addAstricks(field.validation) + field.name }\n              </label>\n              <Input id={field.id} />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'dropDown':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>\n                {this.addAstricks(field.validation) + field.name }\n              </label>\n              <Dropdown\n                id={field.id}\n                placeholder={field.placeholder}\n                options={statekeys}\n              />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'textArea':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>\n                {this.addAstricks(field.validation) + field.name }\n              </label>\n              <TextArea\n                id={field.id}\n                placeholder={field.placeholder}\n              />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'checkbox':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>\n                {this.addAstricks(field.validation) + field.name }\n              </label>\n              <Checkbox\n                name={field.name}\n                value=\"true\"\n              />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'radio':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>\n                {this.addAstricks(field.validation) + field.name }\n              </label>\n              <Form.Group id={field.id} inline>\n                {this.renderRadioButtons(field.options)}\n                {errors[field.id] && <InlineError text={errors[field.id]} />}\n              </Form.Group>\n            </Form.Field>\n          );\n\n        default:\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>\n                {this.addAstricks(field.validation) + field.name }\n              </label>\n              <Input id={field.id} />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n      }\n    });\n    return formUI;\n  };\n\n  render() {\n    return (\n      <Segment padded>\n        <Header size=\"large\">{this.props.requestType}</Header>\n        <Form onSubmit={this.onSubmit}>\n          <Segment style={Styles.segment}>\n            {this.renderFormFromJson(this.props.requestType, this.state.errors)}\n          </Segment>\n          <Segment style={Styles.segment}>\n            <Button type=\"submit\" fluid positive size=\"large\">\n                  Continue\n            </Button>\n          </Segment>\n        </Form>\n      </Segment>\n    );\n  }\n}\n\nDynamicForm.propTypes = {\n  requestType: PropTypes.string.isRequired,\n  setRequestInformation: PropTypes.func.isRequired,\n};\n\nexport default DynamicForm;\n"]}